version: '3.1'

services:
  db:
    image: postgres:16.0
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: toor
    ports:
      - "5432:5432"
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
      - ./database/user_init.sql:/docker-entrypoint-initdb.d/user_init.sql
      - ./database/tweet_init.sql:/docker-entrypoint-initdb.d/tweet_init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root"]
      interval: 30s
      timeout: 15s
      retries: 5

  service_discovery:
    # image: markus17/service_discovery:latest
    build: service_discovery
    ports:
      - "8040:8040"

  user_service_0:
    # image: markus17/user:latest
    build: user
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      service_discovery:
        condition: service_started
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - SERVICE_DISCOVERY_HOST=service_discovery
      - SERVICE_DISCOVERY_PORT=8040
      - SELF_PORT=8000

  user_service_1:
    # image: markus17/user:latest
    build: user
    ports:
      - "8001:8001"
    depends_on:
      db:
        condition: service_healthy
      service_discovery:
        condition: service_started
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - SERVICE_DISCOVERY_HOST=service_discovery
      - SERVICE_DISCOVERY_PORT=8040
      - SELF_PORT=8001

  user_service_2:
    # image: markus17/user:latest
    build: user
    ports:
      - "8002:8002"
    depends_on:
      db:
        condition: service_healthy
      service_discovery:
        condition: service_started
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - SERVICE_DISCOVERY_HOST=service_discovery
      - SERVICE_DISCOVERY_PORT=8040
      - SELF_PORT=8002

  tweet_service_0:
    # image: markus17/tweet:latest
    build: tweet
    ports:
      - "8010:8010"
    depends_on:
      db:
        condition: service_healthy
      service_discovery:
        condition: service_started
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - SERVICE_DISCOVERY_HOST=service_discovery
      - SERVICE_DISCOVERY_PORT=8040
      - SELF_PORT=8010

  tweet_service_1:
    # image: markus17/tweet:latest
    build: tweet
    ports:
      - "8011:8011"
    depends_on:
      db:
        condition: service_healthy
      service_discovery:
        condition: service_started
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - SERVICE_DISCOVERY_HOST=service_discovery
      - SERVICE_DISCOVERY_PORT=8040
      - SELF_PORT=8011

  tweet_service_2:
    # image: markus17/tweet:latest
    build: tweet
    ports:
      - "8012:8012"
    depends_on:
      db:
        condition: service_healthy
      service_discovery:
        condition: service_started
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - SERVICE_DISCOVERY_HOST=service_discovery
      - SERVICE_DISCOVERY_PORT=8040
      - SELF_PORT=8012

  gateway:
    # image: markus17/gateway:latest
    build: gateway
    ports:
      - "8030:8030"
    depends_on:
      db:
        condition: service_healthy
      service_discovery:
        condition: service_started
    environment:
      - REDIS_HOST=redis
      - RATE_LIMITER_LIMIT=6
      - RATE_LIMITER_WINDOW_S=3
      - SERVICE_DISCOVERY_HOST=service_discovery
      - SERVICE_DISCOVERY_PORT=8040
      - TASK_TIMEOUT=10

  redis-node-1:
    image: redis:7.2
    ports:
      - 7000:7000
    hostname: redis-node-1
    volumes:
      - ./redis/7000:/redis
    command: redis-server /redis/redis.conf

  redis-node-2:
    image: redis:7.2
    ports:
      - 7001:7001
    hostname: redis-node-2
    volumes:
      - ./redis/7001:/redis
    command: redis-server /redis/redis.conf

  redis-node-3:
    image: redis:7.2
    ports:
      - 7002:7002
    hostname: redis-node-3
    volumes:
      - ./redis/7002:/redis
    command: redis-server /redis/redis.conf

  redis-node-4:
    image: redis:7.2
    ports:
      - 7003:7003
    hostname: redis-node-4
    volumes:
      - ./redis/7003:/redis
    command: redis-server /redis/redis.conf

  redis-node-5:
    image: redis:7.2
    ports:
      - 7004:7004
    hostname: redis-node-5
    volumes:
      - ./redis/7004:/redis
    command: redis-server /redis/redis.conf

  redis-node-6:
    image: redis:7.2
    ports:
      - 7005:7005
    hostname: redis-node-6
    volumes:
      - ./redis/7005:/redis
    command: redis-server /redis/redis.conf

  redis-cluster-creator:
    image: redis:7.2
    ports:
      - 6999:6999
    command: redis-cli -p 7000 --cluster create redis-node-1:7000 redis-node-2:7001 redis-node-3:7002 redis-node-4:7003 redis-node-5:7004 redis-node-6:7005 --cluster-replicas 1 --cluster-yes
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
      - redis-node-5
      - redis-node-6

  prometheus:
    image: prom/prometheus:v2.47.2
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command: 
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090

  grafana:
    image: grafana/grafana:10.2.0
    ports:
      - 3000:3000
    depends_on:
      - prometheus
    volumes:
      - ./grafana:/etc/grafana/provisioning/

volumes:
  postgres_data:
    driver: local
